{"ast":null,"code":"import _defineProperty from \"/Users/davidghazi/Project3/project3/create-react-express/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"axios\"; //User 1 cards\n\nvar user1_deck = []; //User 1 current card drawn\n\nvar user1_card = []; //User 2 cards\n\nvar user2_deck = []; //User 2 current card drawn\n\nvar user2_card = [];\n\nfunction WarGame() {\n  var setShuffled = useState(\"\");\n  var shuffled = useState(\"\");\n  var currentDeck; //Calls new game when the page loads\n\n  useEffect(function () {\n    newGame();\n  }, []);\n\n  function newGame() {\n    user1_deck = [];\n    user1_card = [];\n    user2_deck = [];\n    user2_card = []; //Make API call to retrieve cards for game\n\n    axios.get(\"https://deckofcardsapi.com/api/deck/new/shuffle/?deck_count=1\").then(function (result) {\n      result.data.success && console.log(\"Deck obtained\"); //Shuffle deck\n\n      setShuffled(result.data.shuffled); //Retrieve deck\n\n      currentDeck = result.data.deck_id; //Clear decks in both users hands\n\n      user1_deck = [];\n      user2_deck = []; //Make API request to evenly split cards between both users\n\n      axios.get(\"https://deckofcardsapi.com/api/deck/\".concat(currentDeck, \"/draw/?count=52\")).then(function (result) {\n        result.data.success && console.log(\"Deck is split!\");\n        var i;\n\n        for (i = 0; i < 52; i += 2) {\n          var card1 = result.data.cards[i]; //Card object to display user 1's hand\n\n          var drawnCard1 = _defineProperty({\n            value: \"\".concat(card1.value),\n            suit: \"\".concat(card1.suit),\n            imageURL: \"\".concat(card1.image),\n            cardCode: \"\".concat(card1.code)\n          }, \"imageURL\", \"\".concat(card1.image)); //Card object to display user 2's hand\n\n\n          var drawnCard2 = _defineProperty({\n            value: \"\".concat(card2.value),\n            suit: \"\".concat(card2.suit),\n            imageURL: \"\".concat(card2.image),\n            cardCode: \"\".concat(card2.code)\n          }, \"imageURL\", \"\".concat(card2.image));\n\n          user1_deck.push(drawnCard1);\n          user2_deck.push(drawnCard2);\n        } //Pushes new card to the browser\n\n\n        updateRender(function (n) {\n          return !n;\n        });\n      }).catch(function (error) {\n        return console.log(error);\n      });\n    }).catch(function (error) {\n      return console.log(error);\n    });\n  }\n}","map":{"version":3,"sources":["/Users/davidghazi/Project3/project3/create-react-express/client/src/components/WarGame.js"],"names":["React","useState","useEffect","axios","user1_deck","user1_card","user2_deck","user2_card","WarGame","setShuffled","shuffled","currentDeck","newGame","get","then","result","data","success","console","log","deck_id","i","card1","cards","drawnCard1","value","suit","imageURL","image","cardCode","code","drawnCard2","card2","push","updateRender","n","catch","error"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\n\n//User 1 cards\nlet user1_deck = [];\n//User 1 current card drawn\nlet user1_card = [];\n\n//User 2 cards\nlet user2_deck = [];\n//User 2 current card drawn\nlet user2_card =[];\n\nfunction WarGame() {\n\n  const setShuffled = useState(\"\");\n  const shuffled = useState(\"\");\n  let currentDeck\n\n  //Calls new game when the page loads\n  useEffect(() => {\n    newGame();\n  }, []);\n\n  function newGame(){\n\n    user1_deck = [];\n    user1_card = [];\n    user2_deck = [];\n    user2_card = [];\n    //Make API call to retrieve cards for game\n    axios.get(`https://deckofcardsapi.com/api/deck/new/shuffle/?deck_count=1`)\n      .then(result => {\n        result.data.success && console.log(\"Deck obtained\");\n\n        //Shuffle deck\n        setShuffled(result.data.shuffled);\n        //Retrieve deck\n        currentDeck = result.data.deck_id;\n\n        //Clear decks in both users hands\n        user1_deck = [];\n        user2_deck = [];\n\n        //Make API request to evenly split cards between both users\n        axios.get(`https://deckofcardsapi.com/api/deck/${currentDeck}/draw/?count=52`)\n          .then(result => {\n            result.data.success && console.log(\"Deck is split!\")\n\n            let i;\n            for (i = 0; i < 52; i += 2){\n              let card1 = result.data.cards[i];\n              \n              //Card object to display user 1's hand\n              let drawnCard1 = {\n                value: `${card1.value}`,\n                suit: `${card1.suit}`,\n                imageURL: `${card1.image}`,\n                cardCode: `${card1.code}`,\n                imageURL: `${card1.image}`\n              };\n\n              //Card object to display user 2's hand\n              let drawnCard2 = {\n                value: `${card2.value}`,\n                suit: `${card2.suit}`,\n                imageURL: `${card2.image}`,\n                cardCode: `${card2.code}`,\n                imageURL: `${card2.image}`\n              };\n\n              user1_deck.push(drawnCard1);\n              user2_deck.push(drawnCard2);\n            }\n            //Pushes new card to the browser\n            updateRender(n => !n);\n          })\n          .catch(error => console.log(error));\n      })\n    .catch(error => console.log(error));\n  }\n\n}"]},"metadata":{},"sourceType":"module"}