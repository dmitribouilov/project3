{"ast":null,"code":"import _regeneratorRuntime from \"/Users/davidghazi/Project3/project3/create-react-express/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/davidghazi/Project3/project3/create-react-express/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"/Users/davidghazi/Project3/project3/create-react-express/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/davidghazi/Project3/project3/create-react-express/client/src/components/WarGame.js\";\n// import React, { useState, useEffect } from \"react\";\n// import axios from \"axios\";\n// //User 1 cards\n// let user1_deck = [];\n// //User 1 current card drawn\n// let user1_card = [];\n// //User 2 cards\n// let user2_deck = [];\n// //User 2 current card drawn\n// let user2_card =[];\n// function WarGame() {\n//   const [shuffled, setShuffled] = useState(\"\");\n//   // const shuffled = useState(\"\");\n//   const [,updateRender] = useState();\n//   let currentDeck;\n//   void shuffled;\n//   //Calls new game when the page loads\n//   useEffect(() => {\n//     newGame();\n//   }, []);\n//   function newGame(){\n//     user1_deck = [];\n//     user1_card = [];\n//     user2_deck = [];\n//     user2_card = [];\n//     //Make API call to retrieve cards for game\n//     axios.get(`https://deckofcardsapi.com/api/deck/new/shuffle/?deck_count=1`)\n//       .then(result => {\n//         result.data.success && console.log(\"Deck obtained\");\n//         //Shuffle deck\n//         setShuffled(result.data.shuffled);\n//         //Retrieve deck\n//         currentDeck = result.data.deck_id;\n//         //Clear decks in both users hands\n//         user1_deck = [];\n//         user2_deck = [];\n//         //Make API request to evenly split cards between both users\n//         axios.get(`https://deckofcardsapi.com/api/deck/${currentDeck}/draw/?count=52`)\n//           .then(result => {\n//             result.data.success && console.log(\"Deck is split!\")\n//             let i;\n//             for (i = 0; i < 52; i += 2){\n//               let card1 = result.data.cards[i];\n//               //Card object to display user 1's hand\n//               let drawnCard1 = {\n//                 value: `${card1.value}`,\n//                 suit: `${card1.suit}`,\n//                 imageURL: `${card1.image}`,\n//                 cardCode: `${card1.code}`,\n//                 imageURL: `${card1.image}`\n//               };\n//               let card2 = result.data.cards[i + 1];\n//               //Card object to display user 2's hand\n//               let drawnCard2 = {\n//                 value: `${card2.value}`,\n//                 suit: `${card2.suit}`,\n//                 imageURL: `${card2.image}`,\n//                 cardCode: `${card2.code}`,\n//                 imageURL: `${card2.image}`\n//               };\n//               user1_deck.push(drawnCard1);\n//               user2_deck.push(drawnCard2);\n//             }\n//             //Pushes new card to the browser\n//             updateRender(n => !n);\n//           })\n//           .catch(error => console.log(error));\n//       })\n//     .catch(error => console.log(error));\n//   }\n//   function deal() {\n//     try {\n//       //reset the pile for each player\n//       user1_deck = [];\n//       user2_deck = [];\n//       if (!gameWon()) {\n//         let player1 = user1_deck.pop();\n//         let player2 = user2_deck.pop();\n//         if (!(player1 === \"undefined\" && player2 === \"undefined\")) {\n//           user1_card.push(player1);\n//           user2_card.push(player2);\n//           updateRender(n => !n);\n//           drawWinner();\n//         }\n//       } else {\n//         gameWon();\n//         updateRender(n => !n);\n//       }\n//     } catch (e) {}\n//   }\n//   //Scores for whoever wins round\n//   async function drawWinner() {\n//     //get player card value\n//     let user1Score = cardValue(user1_card[user1_card.length - 1]);\n//     //get deal card value\n//     let user2Score = cardValue(user2_card[user2_card.length - 1]);\n//     if (user1Score === user2Score) {\n//       //its a tie\n//       alert('Tie')\n//     } else if (user1Score > user2Score) {\n//       //player wins the flip\n//       alert(\"User1 wins this round\");\n//     } else {\n//       //dealer wins\n//       alert(\"User2 wins this round\");\n//     }\n//   }\n//   //Create function to specify the value for A, K, Q, J\n//   function cardValue(card){\n//     try {\n//       switch (card.value) {\n//         case \"ACE\":\n//           return 14;\n//         case \"KING\":\n//           return 13;\n//         case \"QUEEN\":\n//           return 12;\n//         case \"JACK\":\n//           return 11;\n//         default:\n//           return card.value;\n//       }\n//     } catch (e) {}\n//   }\n//   //checks if either player has an empty deck\n//   function gameWon() {\n//     console.log(\"P: \" + user1_deck.length + \" D: \" + user2_deck.length);\n//     if (user1_deck.length === 0) {\n//       return true;\n//     }\n//     if (user2_deck.length === 0) {\n//       return true;\n//     }\n//     return false;\n//   }\n//   return (\n//     <>\n//     <div>\n//       <div>\n//         <div>\n//           <button onClick={deal}>Hit</button>\n//           <button onClick={newGame}>\n//             New Game\n//           </button>\n//         </div>\n//       </div>\n//       <div>\n//         <div type=\"player\">\n//           <h2>Player 1</h2>\n//           {user1_card &&\n//             user1_card.map((card, index) => {\n//               return (\n//                 <img\n//                   key={`player${index}`}\n//                   src={`${card.imageURL}`}\n//                   alt={`${card.value} of ${card.suit}`}\n//                 />\n//               );\n//             })}\n//         </div>\n//         <div>\n//           <h2>Player 2</h2>\n//           {user2_card &&\n//             user2_card.map((card, index) => {\n//               return (\n//                 <img\n//                   key={`dealer${index}`}\n//                   src={`${card.imageURL}`}\n//                   alt={`${card.value} of ${card.suit}`}\n//                 />\n//               );\n//             })}\n//         </div>\n//       </div>\n//     </div>\n//   </>\n//   )\n// }\n// export default WarGame;\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nvar player_pile = []; //cards the player has\n\nvar player_card = []; //card the player drew\n\nvar dealer_pile = []; //cards the dealer has\n\nvar dealer_card = []; //card the dealer drew\n\nfunction WarGame() {\n  var _this = this;\n\n  var _useState = useState(\"\"),\n      _useState2 = _slicedToArray(_useState, 2),\n      shuffled = _useState2[0],\n      setShuffled = _useState2[1];\n\n  var _useState3 = useState(),\n      _useState4 = _slicedToArray(_useState3, 2),\n      updateRender = _useState4[1];\n\n  var curDeck;\n  void shuffled; //calls startNewGame() when th page loads\n\n  useEffect(function () {\n    startNewGame(); // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []); // Create a new deck of cards and store the deck id for future API calls\n\n  function startNewGame() {\n    player_pile = [];\n    dealer_pile = [];\n    player_card = [];\n    dealer_card = [];\n    axios.get(\"https://deckofcardsapi.com/api/deck/new/shuffle/?deck_count=1\").then(function (result) {\n      result.data.success && console.log(\"Deck obtained\");\n      setShuffled(result.data.shuffled);\n      curDeck = result.data.deck_id; //clear the cards in the player and dealer hands\n\n      player_pile = [];\n      dealer_pile = []; //split the deck\n\n      axios.get(\"https://deckofcardsapi.com/api/deck/\".concat(curDeck, \"/draw/?count=52\")).then(function (result) {\n        result.data.success && console.log(\"Beginning split\");\n        var i;\n\n        for (i = 0; i < 52; i += 2) {\n          var card1 = result.data.cards[i]; //create a card object to push onto the player hand\n\n          var drawn_card1 = {\n            value: \"\".concat(card1.value),\n            suit: \"\".concat(card1.suit),\n            imageURL: \"\".concat(card1.image),\n            cardCode: \"\".concat(card1.code),\n            faceUp: \"\".concat(card1.image)\n          };\n          var card2 = result.data.cards[i + 1]; //create a card object to push onto the dealer hand\n\n          var drawn_card2 = {\n            value: \"\".concat(card2.value),\n            suit: \"\".concat(card2.suit),\n            imageURL: \"\".concat(card2.image),\n            cardCode: \"\".concat(card2.code),\n            faceUp: \"\".concat(card2.image)\n          }; //add 1 card to both player and dealer piles\n\n          player_pile.push(drawn_card1);\n          dealer_pile.push(drawn_card2);\n        }\n\n        updateRender(function (n) {\n          return !n;\n        });\n      }).catch(function (error) {\n        return console.log(error);\n      });\n    }).catch(function (error) {\n      return console.log(error);\n    });\n  }\n\n  function draw() {\n    try {\n      //reset the pile for each player\n      dealer_card = [];\n      player_card = [];\n\n      if (!gameWon()) {\n        var cp = player_pile.pop();\n        var cd = dealer_pile.pop();\n\n        if (!(cp === \"undefined\" && cd === \"undefined\")) {\n          player_card.push(cp);\n          dealer_card.push(cd);\n          updateRender(function (n) {\n            return !n;\n          });\n          computeFlipWinner();\n        }\n      } else {\n        gameWon();\n        updateRender(function (n) {\n          return !n;\n        });\n      }\n    } catch (e) {}\n  }\n\n  function drawTie() {\n    return _drawTie.apply(this, arguments);\n  } //computes who won the flip\n\n\n  function _drawTie() {\n    _drawTie = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var i;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              for (i = 0; i < 3; i++ //flip 3 cards face down\n              ) {\n                player_card.push(player_pile.pop());\n                dealer_card.push(dealer_pile.pop());\n              }\n\n              player_card.push(player_pile.pop());\n              dealer_card.push(dealer_pile.pop());\n              _context.next = 5;\n              return sleepDelay(1);\n\n            case 5:\n              updateRender(function (n) {\n                return !n;\n              });\n              computeFlipWinner();\n\n            case 7:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n    return _drawTie.apply(this, arguments);\n  }\n\n  function computeFlipWinner() {\n    return _computeFlipWinner.apply(this, arguments);\n  } //Gets te value of a given card\n\n\n  function _computeFlipWinner() {\n    _computeFlipWinner = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n      var player_score, dealer_score;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              //get player card value\n              player_score = getCardValue(player_card[player_card.length - 1]); //get deal card value\n\n              dealer_score = getCardValue(dealer_card[dealer_card.length - 1]);\n\n              if (!(player_score === dealer_score)) {\n                _context2.next = 7;\n                break;\n              }\n\n              //its a tie\n              console.log(\"Tie\");\n              drawTie();\n              _context2.next = 26;\n              break;\n\n            case 7:\n              if (!(player_score > dealer_score)) {\n                _context2.next = 18;\n                break;\n              }\n\n              //player wins the flip\n              console.log(\"Player wins this round\");\n\n            case 9:\n              if (!(player_card.length > 0)) {\n                _context2.next = 16;\n                break;\n              }\n\n              _context2.next = 12;\n              return sleepDelay(1);\n\n            case 12:\n              addCard(player_pile, player_card.pop());\n              addCard(player_pile, dealer_card.pop());\n              _context2.next = 9;\n              break;\n\n            case 16:\n              _context2.next = 26;\n              break;\n\n            case 18:\n              //dealer wins\n              console.log(\"Dealer wins this round\");\n\n            case 19:\n              if (!(player_card.length > 0)) {\n                _context2.next = 26;\n                break;\n              }\n\n              _context2.next = 22;\n              return sleepDelay(1);\n\n            case 22:\n              addCard(dealer_pile, player_card.pop());\n              addCard(dealer_pile, dealer_card.pop());\n              _context2.next = 19;\n              break;\n\n            case 26:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n    return _computeFlipWinner.apply(this, arguments);\n  }\n\n  function getCardValue(card) {\n    try {\n      switch (card.value) {\n        case \"ACE\":\n          //highest value card in the game\n          return 14;\n\n        case \"KING\":\n          return 13;\n\n        case \"QUEEN\":\n          return 12;\n\n        case \"JACK\":\n          return 11;\n\n        default:\n          return card.value;\n      }\n    } catch (e) {}\n  } //Adds the given card to the given pile\n\n\n  function addCard(pile, card) {\n    var i;\n\n    try {\n      card.imageURL = card.faceUp;\n\n      for (i = pile.length; i > 0; i--) {\n        pile[i] = pile[i - 1];\n      }\n\n      pile[0] = card;\n    } catch (e) {}\n  } //checks if either player has an empty deck\n\n\n  function gameWon() {\n    console.log(\"P: \" + player_pile.length + \" D: \" + dealer_pile.length);\n\n    if (player_pile.length === 0) {\n      return true;\n    }\n\n    if (dealer_pile.length === 0) {\n      return true;\n    }\n\n    return false;\n  }\n\n  function sleepDelay(ms) {\n    return new Promise(function (resolve) {\n      return setTimeout(resolve, ms);\n    });\n  }\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 401,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 402,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 403,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    onClick: draw,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 404,\n      columnNumber: 13\n    }\n  }, \"Hit\"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: startNewGame,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 405,\n      columnNumber: 13\n    }\n  }, \"New Game\"))), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 410,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    type: \"player\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 411,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 412,\n      columnNumber: 13\n    }\n  }, \"Player Card\"), player_card && player_card.map(function (card, index) {\n    return /*#__PURE__*/React.createElement(\"img\", {\n      key: \"player\".concat(index),\n      src: \"\".concat(card.imageURL),\n      alt: \"\".concat(card.value, \" of \").concat(card.suit),\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 416,\n        columnNumber: 19\n      }\n    });\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 424,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 425,\n      columnNumber: 13\n    }\n  }, \"Dealer Card\"), dealer_card && dealer_card.map(function (card, index) {\n    return /*#__PURE__*/React.createElement(\"img\", {\n      key: \"dealer\".concat(index),\n      src: \"\".concat(card.imageURL),\n      alt: \"\".concat(card.value, \" of \").concat(card.suit),\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 429,\n        columnNumber: 19\n      }\n    });\n  }))), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 439,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 440,\n      columnNumber: 11\n    }\n  }, \"Player cards: \", player_pile.length), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 441,\n      columnNumber: 11\n    }\n  }, \"Dealer cards: \", dealer_pile.length), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 442,\n      columnNumber: 11\n    }\n  }))));\n}\n\nexport default WarGame;","map":{"version":3,"sources":["/Users/davidghazi/Project3/project3/create-react-express/client/src/components/WarGame.js"],"names":["React","useState","useEffect","axios","player_pile","player_card","dealer_pile","dealer_card","WarGame","shuffled","setShuffled","updateRender","curDeck","startNewGame","get","then","result","data","success","console","log","deck_id","i","card1","cards","drawn_card1","value","suit","imageURL","image","cardCode","code","faceUp","card2","drawn_card2","push","n","catch","error","draw","gameWon","cp","pop","cd","computeFlipWinner","e","drawTie","sleepDelay","player_score","getCardValue","length","dealer_score","addCard","card","pile","ms","Promise","resolve","setTimeout","map","index"],"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","sourcesContent":["// import React, { useState, useEffect } from \"react\";\n// import axios from \"axios\";\n\n// //User 1 cards\n// let user1_deck = [];\n// //User 1 current card drawn\n// let user1_card = [];\n\n// //User 2 cards\n// let user2_deck = [];\n// //User 2 current card drawn\n// let user2_card =[];\n\n// function WarGame() {\n\n//   const [shuffled, setShuffled] = useState(\"\");\n//   // const shuffled = useState(\"\");\n//   const [,updateRender] = useState();\n//   let currentDeck;\n//   void shuffled;\n\n//   //Calls new game when the page loads\n//   useEffect(() => {\n//     newGame();\n//   }, []);\n\n//   function newGame(){\n\n//     user1_deck = [];\n//     user1_card = [];\n//     user2_deck = [];\n//     user2_card = [];\n//     //Make API call to retrieve cards for game\n//     axios.get(`https://deckofcardsapi.com/api/deck/new/shuffle/?deck_count=1`)\n//       .then(result => {\n//         result.data.success && console.log(\"Deck obtained\");\n\n//         //Shuffle deck\n//         setShuffled(result.data.shuffled);\n//         //Retrieve deck\n//         currentDeck = result.data.deck_id;\n\n//         //Clear decks in both users hands\n//         user1_deck = [];\n//         user2_deck = [];\n\n//         //Make API request to evenly split cards between both users\n//         axios.get(`https://deckofcardsapi.com/api/deck/${currentDeck}/draw/?count=52`)\n//           .then(result => {\n//             result.data.success && console.log(\"Deck is split!\")\n\n//             let i;\n//             for (i = 0; i < 52; i += 2){\n//               let card1 = result.data.cards[i];\n              \n//               //Card object to display user 1's hand\n//               let drawnCard1 = {\n//                 value: `${card1.value}`,\n//                 suit: `${card1.suit}`,\n//                 imageURL: `${card1.image}`,\n//                 cardCode: `${card1.code}`,\n//                 imageURL: `${card1.image}`\n//               };\n\n//               let card2 = result.data.cards[i + 1];\n//               //Card object to display user 2's hand\n//               let drawnCard2 = {\n//                 value: `${card2.value}`,\n//                 suit: `${card2.suit}`,\n//                 imageURL: `${card2.image}`,\n//                 cardCode: `${card2.code}`,\n//                 imageURL: `${card2.image}`\n//               };\n\n//               user1_deck.push(drawnCard1);\n//               user2_deck.push(drawnCard2);\n//             }\n//             //Pushes new card to the browser\n//             updateRender(n => !n);\n//           })\n//           .catch(error => console.log(error));\n//       })\n//     .catch(error => console.log(error));\n//   }\n\n//   function deal() {\n//     try {\n//       //reset the pile for each player\n//       user1_deck = [];\n//       user2_deck = [];\n//       if (!gameWon()) {\n//         let player1 = user1_deck.pop();\n//         let player2 = user2_deck.pop();\n//         if (!(player1 === \"undefined\" && player2 === \"undefined\")) {\n//           user1_card.push(player1);\n//           user2_card.push(player2);\n//           updateRender(n => !n);\n//           drawWinner();\n//         }\n//       } else {\n//         gameWon();\n//         updateRender(n => !n);\n//       }\n//     } catch (e) {}\n//   }\n\n//   //Scores for whoever wins round\n//   async function drawWinner() {\n//     //get player card value\n//     let user1Score = cardValue(user1_card[user1_card.length - 1]);\n//     //get deal card value\n//     let user2Score = cardValue(user2_card[user2_card.length - 1]);\n\n//     if (user1Score === user2Score) {\n//       //its a tie\n//       alert('Tie')\n//     } else if (user1Score > user2Score) {\n//       //player wins the flip\n//       alert(\"User1 wins this round\");\n//     } else {\n//       //dealer wins\n//       alert(\"User2 wins this round\");\n//     }\n//   }\n\n//   //Create function to specify the value for A, K, Q, J\n//   function cardValue(card){\n//     try {\n//       switch (card.value) {\n//         case \"ACE\":\n//           return 14;\n//         case \"KING\":\n//           return 13;\n//         case \"QUEEN\":\n//           return 12;\n//         case \"JACK\":\n//           return 11;\n//         default:\n//           return card.value;\n//       }\n//     } catch (e) {}\n//   }\n\n//   //checks if either player has an empty deck\n//   function gameWon() {\n//     console.log(\"P: \" + user1_deck.length + \" D: \" + user2_deck.length);\n//     if (user1_deck.length === 0) {\n//       return true;\n//     }\n//     if (user2_deck.length === 0) {\n//       return true;\n//     }\n//     return false;\n//   }\n\n//   return (\n//     <>\n//     <div>\n//       <div>\n//         <div>\n//           <button onClick={deal}>Hit</button>\n//           <button onClick={newGame}>\n//             New Game\n//           </button>\n//         </div>\n//       </div>\n//       <div>\n//         <div type=\"player\">\n//           <h2>Player 1</h2>\n//           {user1_card &&\n//             user1_card.map((card, index) => {\n//               return (\n//                 <img\n//                   key={`player${index}`}\n//                   src={`${card.imageURL}`}\n//                   alt={`${card.value} of ${card.suit}`}\n//                 />\n//               );\n//             })}\n//         </div>\n//         <div>\n//           <h2>Player 2</h2>\n//           {user2_card &&\n//             user2_card.map((card, index) => {\n//               return (\n//                 <img\n//                   key={`dealer${index}`}\n//                   src={`${card.imageURL}`}\n//                   alt={`${card.value} of ${card.suit}`}\n//                 />\n//               );\n//             })}\n//         </div>\n//       </div>\n//     </div>\n//   </>\n//   )\n\n// }\n\n// export default WarGame;\n\n\n\n\n\n\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\n\nlet player_pile = []; //cards the player has\nlet player_card = []; //card the player drew\n\nlet dealer_pile = []; //cards the dealer has\nlet dealer_card = []; //card the dealer drew\n\nfunction WarGame() {\n  const [shuffled, setShuffled] = useState(\"\");\n  const [, updateRender] = useState();\n  let curDeck;\n  void shuffled;\n\n  //calls startNewGame() when th page loads\n  useEffect(() => {\n    startNewGame();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  // Create a new deck of cards and store the deck id for future API calls\n  function startNewGame() {\n    player_pile = [];\n    dealer_pile = [];\n    player_card = [];\n    dealer_card = [];\n    axios\n      .get(`https://deckofcardsapi.com/api/deck/new/shuffle/?deck_count=1`)\n      .then(result => {\n        result.data.success && console.log(\"Deck obtained\");\n\n        setShuffled(result.data.shuffled);\n        curDeck = result.data.deck_id;\n        //clear the cards in the player and dealer hands\n        player_pile = [];\n        dealer_pile = [];\n        //split the deck\n        axios\n          .get(`https://deckofcardsapi.com/api/deck/${curDeck}/draw/?count=52`)\n          .then(result => {\n            result.data.success && console.log(\"Beginning split\");\n\n            let i;\n            for (i = 0; i < 52; i += 2) {\n              let card1 = result.data.cards[i];\n              //create a card object to push onto the player hand\n              let drawn_card1 = {\n                value: `${card1.value}`,\n                suit: `${card1.suit}`,\n                imageURL: `${card1.image}`,\n                cardCode: `${card1.code}`,\n                faceUp: `${card1.image}`\n              };\n\n              let card2 = result.data.cards[i + 1];\n              //create a card object to push onto the dealer hand\n              let drawn_card2 = {\n                value: `${card2.value}`,\n                suit: `${card2.suit}`,\n                imageURL: `${card2.image}`,\n                cardCode: `${card2.code}`,\n                faceUp: `${card2.image}`\n              };\n\n              //add 1 card to both player and dealer piles\n              player_pile.push(drawn_card1);\n              dealer_pile.push(drawn_card2);\n            }\n            updateRender(n => !n);\n          })\n          .catch(error => console.log(error));\n      })\n      .catch(error => console.log(error));\n  }\n\n  function draw() {\n    try {\n      //reset the pile for each player\n      dealer_card = [];\n      player_card = [];\n      if (!gameWon()) {\n        let cp = player_pile.pop();\n        let cd = dealer_pile.pop();\n        if (!(cp === \"undefined\" && cd === \"undefined\")) {\n          player_card.push(cp);\n          dealer_card.push(cd);\n          updateRender(n => !n);\n          computeFlipWinner();\n        }\n      } else {\n        gameWon();\n        updateRender(n => !n);\n      }\n    } catch (e) {}\n  }\n\n  async function drawTie() {\n    let i;\n    for (\n      i = 0;\n      i < 3;\n      i++ //flip 3 cards face down\n    ) {\n      player_card.push(player_pile.pop());\n\n      dealer_card.push(dealer_pile.pop());\n    }\n    player_card.push(player_pile.pop());\n    dealer_card.push(dealer_pile.pop());\n    await sleepDelay(1);\n    updateRender(n => !n);\n    computeFlipWinner();\n  }\n\n  //computes who won the flip\n  async function computeFlipWinner() {\n    //get player card value\n    let player_score = getCardValue(player_card[player_card.length - 1]);\n    //get deal card value\n    let dealer_score = getCardValue(dealer_card[dealer_card.length - 1]);\n\n    if (player_score === dealer_score) {\n      //its a tie\n      console.log(\"Tie\");\n      drawTie();\n    } else if (player_score > dealer_score) {\n      //player wins the flip\n      console.log(\"Player wins this round\");\n      while (player_card.length > 0) {\n        await sleepDelay(1);\n        addCard(player_pile, player_card.pop());\n        addCard(player_pile, dealer_card.pop());\n      }\n    } else {\n      //dealer wins\n      console.log(\"Dealer wins this round\");\n      while (player_card.length > 0) {\n        await sleepDelay(1);\n        addCard(dealer_pile, player_card.pop());\n        addCard(dealer_pile, dealer_card.pop());\n      }\n    }\n  }\n\n  //Gets te value of a given card\n  function getCardValue(card) {\n    try {\n      switch (card.value) {\n        case \"ACE\": //highest value card in the game\n          return 14;\n        case \"KING\":\n          return 13;\n        case \"QUEEN\":\n          return 12;\n        case \"JACK\":\n          return 11;\n        default:\n          return card.value;\n      }\n    } catch (e) {}\n  }\n\n  //Adds the given card to the given pile\n  function addCard(pile, card) {\n    let i;\n    try {\n      card.imageURL = card.faceUp;\n      for (i = pile.length; i > 0; i--) {\n        pile[i] = pile[i - 1];\n      }\n      pile[0] = card;\n    } catch (e) {}\n  }\n\n  //checks if either player has an empty deck\n  function gameWon() {\n    console.log(\"P: \" + player_pile.length + \" D: \" + dealer_pile.length);\n    if (player_pile.length === 0) {\n      return true;\n    }\n    if (dealer_pile.length === 0) {\n      return true;\n    }\n    return false;\n  }\n\n  function sleepDelay(ms) {\n    return new Promise(resolve => setTimeout(resolve, ms));\n  }\n\n  return (\n    <>\n      <div>\n        <div>\n          <div>\n            <button onClick={draw}>Hit</button>\n            <button onClick={startNewGame}>\n              New Game\n            </button>\n          </div>\n        </div>\n        <div>\n          <div type=\"player\">\n            <h2>Player Card</h2>\n            {player_card &&\n              player_card.map((card, index) => {\n                return (\n                  <img\n                    key={`player${index}`}\n                    src={`${card.imageURL}`}\n                    alt={`${card.value} of ${card.suit}`}\n                  />\n                );\n              })}\n          </div>\n          <div>\n            <h2>Dealer Card</h2>\n            {dealer_card &&\n              dealer_card.map((card, index) => {\n                return (\n                  <img\n                    key={`dealer${index}`}\n                    src={`${card.imageURL}`}\n                    alt={`${card.value} of ${card.suit}`}\n                  />\n                );\n              })}\n          </div>\n        </div>\n\n        <div>\n          <p>Player cards: {player_pile.length}</p>\n          <p>Dealer cards: {dealer_pile.length}</p>\n          <p>{/*winner*/}</p>\n        </div>\n      </div>\n    </>\n  );\n}\n\nexport default WarGame;"]},"metadata":{},"sourceType":"module"}