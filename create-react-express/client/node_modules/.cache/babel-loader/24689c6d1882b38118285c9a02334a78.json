{"ast":null,"code":"import _regeneratorRuntime from \"/Users/davidghazi/Project3/project3/create-react-express/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/davidghazi/Project3/project3/create-react-express/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _defineProperty from \"/Users/davidghazi/Project3/project3/create-react-express/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/davidghazi/Project3/project3/create-react-express/client/src/components/WarGame.js\";\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"axios\"; //User 1 cards\n\nvar user1_deck = []; //User 1 current card drawn\n\nvar user1_card = []; //User 2 cards\n\nvar user2_deck = []; //User 2 current card drawn\n\nvar user2_card = [];\n\nfunction WarGame() {\n  var _this = this;\n\n  var setShuffled = useState(\"\");\n  var shuffled = useState(\"\");\n  var updateRender = useState();\n  var currentDeck; //Calls new game when the page loads\n\n  useEffect(function () {\n    newGame();\n  }, []);\n\n  function newGame() {\n    user1_deck = [];\n    user1_card = [];\n    user2_deck = [];\n    user2_card = []; //Make API call to retrieve cards for game\n\n    axios.get(\"https://deckofcardsapi.com/api/deck/new/shuffle/?deck_count=1\").then(function (result) {\n      result.data.success && console.log(\"Deck obtained\"); //Shuffle deck\n\n      setShuffled(result.data.shuffled); //Retrieve deck\n\n      currentDeck = result.data.deck_id; //Clear decks in both users hands\n\n      user1_deck = [];\n      user2_deck = []; //Make API request to evenly split cards between both users\n\n      axios.get(\"https://deckofcardsapi.com/api/deck/\".concat(currentDeck, \"/draw/?count=52\")).then(function (result) {\n        result.data.success && console.log(\"Deck is split!\");\n        var i;\n\n        for (i = 0; i < 52; i += 2) {\n          var card1 = result.data.cards[i]; //Card object to display user 1's hand\n\n          var drawnCard1 = _defineProperty({\n            value: \"\".concat(card1.value),\n            suit: \"\".concat(card1.suit),\n            imageURL: \"\".concat(card1.image),\n            cardCode: \"\".concat(card1.code)\n          }, \"imageURL\", \"\".concat(card1.image));\n\n          var card2 = result.data.cards[i + 1]; //Card object to display user 2's hand\n\n          var drawnCard2 = _defineProperty({\n            value: \"\".concat(card2.value),\n            suit: \"\".concat(card2.suit),\n            imageURL: \"\".concat(card2.image),\n            cardCode: \"\".concat(card2.code)\n          }, \"imageURL\", \"\".concat(card2.image));\n\n          user1_deck.push(drawnCard1);\n          user2_deck.push(drawnCard2);\n        } //Pushes new card to the browser\n\n\n        updateRender(function (n) {\n          return !n;\n        });\n      }).catch(function (error) {\n        return console.log(error);\n      });\n    }).catch(function (error) {\n      return console.log(error);\n    });\n  }\n\n  function deal() {\n    try {\n      //reset the pile for each player\n      user1_card = [];\n      user2_card = [];\n\n      if (!gameWon()) {\n        var cp = player_pile.pop();\n        var cd = dealer_pile.pop();\n\n        if (!(cp === \"undefined\" && cd === \"undefined\")) {\n          player_card.push(cp);\n          dealer_card.push(cd);\n          updateRender(function (n) {\n            return !n;\n          });\n          computeFlipWinner();\n        }\n      } else {\n        gameWon();\n        updateRender(function (n) {\n          return !n;\n        });\n      }\n    } catch (e) {}\n  } //computes who won the flip\n\n\n  function computeFlipWinner() {\n    return _computeFlipWinner.apply(this, arguments);\n  }\n\n  function _computeFlipWinner() {\n    _computeFlipWinner = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var player_score, dealer_score;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              //get player card value\n              player_score = getCardValue(player_card[player_card.length - 1]); //get deal card value\n\n              dealer_score = getCardValue(dealer_card[dealer_card.length - 1]);\n\n              if (!(player_score === dealer_score)) {\n                _context.next = 7;\n                break;\n              }\n\n              //its a tie\n              console.log(\"Tie\");\n              drawTie();\n              _context.next = 26;\n              break;\n\n            case 7:\n              if (!(player_score > dealer_score)) {\n                _context.next = 18;\n                break;\n              }\n\n              //player wins the flip\n              console.log(\"Player wins this round\");\n\n            case 9:\n              if (!(player_card.length > 0)) {\n                _context.next = 16;\n                break;\n              }\n\n              _context.next = 12;\n              return sleepDelay(1);\n\n            case 12:\n              addCard(player_pile, player_card.pop());\n              addCard(player_pile, dealer_card.pop());\n              _context.next = 9;\n              break;\n\n            case 16:\n              _context.next = 26;\n              break;\n\n            case 18:\n              //dealer wins\n              console.log(\"Dealer wins this round\");\n\n            case 19:\n              if (!(player_card.length > 0)) {\n                _context.next = 26;\n                break;\n              }\n\n              _context.next = 22;\n              return sleepDelay(1);\n\n            case 22:\n              addCard(dealer_pile, player_card.pop());\n              addCard(dealer_pile, dealer_card.pop());\n              _context.next = 19;\n              break;\n\n            case 26:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n    return _computeFlipWinner.apply(this, arguments);\n  }\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    onClick: draw,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 11\n    }\n  }, \"Hit\"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: startNewGame,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 11\n    }\n  }, \"New Game\"))), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    type: \"player\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 11\n    }\n  }, \"Player Card\"), player_card && player_card.map(function (card, index) {\n    return /*#__PURE__*/React.createElement(\"img\", {\n      key: \"player\".concat(index),\n      src: \"\".concat(card.imageURL),\n      alt: \"\".concat(card.value, \" of \").concat(card.suit),\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 17\n      }\n    });\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 11\n    }\n  }, \"Dealer Card\"), dealer_card && dealer_card.map(function (card, index) {\n    return /*#__PURE__*/React.createElement(\"img\", {\n      key: \"dealer\".concat(index),\n      src: \"\".concat(card.imageURL),\n      alt: \"\".concat(card.value, \" of \").concat(card.suit),\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 17\n      }\n    });\n  }))), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 9\n    }\n  }, \"Player cards: \", player_pile.length), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 9\n    }\n  }, \"Dealer cards: \", dealer_pile.length), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 9\n    }\n  }))));\n}\n\nexport default WarGame;","map":{"version":3,"sources":["/Users/davidghazi/Project3/project3/create-react-express/client/src/components/WarGame.js"],"names":["React","useState","useEffect","axios","user1_deck","user1_card","user2_deck","user2_card","WarGame","setShuffled","shuffled","updateRender","currentDeck","newGame","get","then","result","data","success","console","log","deck_id","i","card1","cards","drawnCard1","value","suit","imageURL","image","cardCode","code","card2","drawnCard2","push","n","catch","error","deal","gameWon","cp","player_pile","pop","cd","dealer_pile","player_card","dealer_card","computeFlipWinner","e","player_score","getCardValue","length","dealer_score","drawTie","sleepDelay","addCard","draw","startNewGame","map","card","index"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\n\n//User 1 cards\nlet user1_deck = [];\n//User 1 current card drawn\nlet user1_card = [];\n\n//User 2 cards\nlet user2_deck = [];\n//User 2 current card drawn\nlet user2_card =[];\n\nfunction WarGame() {\n\n  const setShuffled = useState(\"\");\n  const shuffled = useState(\"\");\n  const updateRender = useState();\n  let currentDeck\n\n  //Calls new game when the page loads\n  useEffect(() => {\n    newGame();\n  }, []);\n\n  function newGame(){\n\n    user1_deck = [];\n    user1_card = [];\n    user2_deck = [];\n    user2_card = [];\n    //Make API call to retrieve cards for game\n    axios.get(`https://deckofcardsapi.com/api/deck/new/shuffle/?deck_count=1`)\n      .then(result => {\n        result.data.success && console.log(\"Deck obtained\");\n\n        //Shuffle deck\n        setShuffled(result.data.shuffled);\n        //Retrieve deck\n        currentDeck = result.data.deck_id;\n\n        //Clear decks in both users hands\n        user1_deck = [];\n        user2_deck = [];\n\n        //Make API request to evenly split cards between both users\n        axios.get(`https://deckofcardsapi.com/api/deck/${currentDeck}/draw/?count=52`)\n          .then(result => {\n            result.data.success && console.log(\"Deck is split!\")\n\n            let i;\n            for (i = 0; i < 52; i += 2){\n              let card1 = result.data.cards[i];\n              \n              //Card object to display user 1's hand\n              let drawnCard1 = {\n                value: `${card1.value}`,\n                suit: `${card1.suit}`,\n                imageURL: `${card1.image}`,\n                cardCode: `${card1.code}`,\n                imageURL: `${card1.image}`\n              };\n\n              let card2 = result.data.cards[i + 1];\n              //Card object to display user 2's hand\n              let drawnCard2 = {\n                value: `${card2.value}`,\n                suit: `${card2.suit}`,\n                imageURL: `${card2.image}`,\n                cardCode: `${card2.code}`,\n                imageURL: `${card2.image}`\n              };\n\n              user1_deck.push(drawnCard1);\n              user2_deck.push(drawnCard2);\n            }\n            //Pushes new card to the browser\n            updateRender(n => !n);\n          })\n          .catch(error => console.log(error));\n      })\n    .catch(error => console.log(error));\n  }\n\n  function deal() {\n    try {\n      //reset the pile for each player\n      user1_card = [];\n      user2_card = [];\n      if (!gameWon()) {\n        let cp = player_pile.pop();\n        let cd = dealer_pile.pop();\n        if (!(cp === \"undefined\" && cd === \"undefined\")) {\n          player_card.push(cp);\n          dealer_card.push(cd);\n          updateRender(n => !n);\n          computeFlipWinner();\n        }\n      } else {\n        gameWon();\n        updateRender(n => !n);\n      }\n    } catch (e) {}\n  }\n\n  //computes who won the flip\n  async function computeFlipWinner() {\n    //get player card value\n    let player_score = getCardValue(player_card[player_card.length - 1]);\n    //get deal card value\n    let dealer_score = getCardValue(dealer_card[dealer_card.length - 1]);\n\n    if (player_score === dealer_score) {\n      //its a tie\n      console.log(\"Tie\");\n      drawTie();\n    } else if (player_score > dealer_score) {\n      //player wins the flip\n      console.log(\"Player wins this round\");\n      while (player_card.length > 0) {\n        await sleepDelay(1);\n        addCard(player_pile, player_card.pop());\n        addCard(player_pile, dealer_card.pop());\n      }\n    } else {\n      //dealer wins\n      console.log(\"Dealer wins this round\");\n      while (player_card.length > 0) {\n        await sleepDelay(1);\n        addCard(dealer_pile, player_card.pop());\n        addCard(dealer_pile, dealer_card.pop());\n      }\n    }\n  }\n\n  return (\n    <>\n    <div>\n      <div>\n        <div>\n          <button onClick={draw}>Hit</button>\n          <button onClick={startNewGame}>\n            New Game\n          </button>\n        </div>\n      </div>\n      <div>\n        <div type=\"player\">\n          <h2>Player Card</h2>\n          {player_card &&\n            player_card.map((card, index) => {\n              return (\n                <img\n                  key={`player${index}`}\n                  src={`${card.imageURL}`}\n                  alt={`${card.value} of ${card.suit}`}\n                />\n              );\n            })}\n        </div>\n        <div>\n          <h2>Dealer Card</h2>\n          {dealer_card &&\n            dealer_card.map((card, index) => {\n              return (\n                <img\n                  key={`dealer${index}`}\n                  src={`${card.imageURL}`}\n                  alt={`${card.value} of ${card.suit}`}\n                />\n              );\n            })}\n        </div>\n      </div>\n\n      <div>\n        <p>Player cards: {player_pile.length}</p>\n        <p>Dealer cards: {dealer_pile.length}</p>\n        <p>{/*winner*/}</p>\n      </div>\n    </div>\n  </>\n  )\n\n}\n\nexport default WarGame;"]},"metadata":{},"sourceType":"module"}